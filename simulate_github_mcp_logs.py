#!/usr/bin/env python3
"""
üîç Simulador de GitHub MCP - An√°lisis de Logs de Deployment
Simula la capacidad de GitHub MCP para obtener informaci√≥n de deployment
"""

import os
import subprocess
import json
from datetime import datetime, timedelta
from pathlib import Path

class GitHubMCPSimulator:
    def __init__(self):
        self.repo_owner = "ENEASJO"
        self.repo_name = "registro-valorizaciones-backend"
        
    def print_section(self, title):
        print(f"\n{'='*80}")
        print(f"üîç {title}")
        print('='*80)

    def print_error(self, message):
        print(f"‚ùå {message}")

    def print_success(self, message):
        print(f"‚úÖ {message}")

    def print_warning(self, message):
        print(f"‚ö†Ô∏è  {message}")

    def print_info(self, message):
        print(f"‚ÑπÔ∏è  {message}")

    def analyze_recent_commits(self):
        """Analizar commits recientes para entender el historial de deployment"""
        self.print_section("AN√ÅLISIS DE COMMITS RECIENTES")
        
        try:
            # Obtener los √∫ltimos 10 commits con detalles
            result = subprocess.run([
                'git', 'log', '-10', '--pretty=format:%h|%s|%an|%ad', '--date=relative'
            ], capture_output=True, text=True, cwd='.')
            
            if result.returncode == 0:
                commits = result.stdout.strip().split('\n')
                self.print_info(f"Analizando {len(commits)} commits recientes:")
                
                deployment_related_commits = []
                smart_system_commits = []
                fix_commits = []
                
                for commit in commits:
                    if '|' in commit:
                        hash_val, message, author, date = commit.split('|', 3)
                        
                        # Clasificar commits
                        message_lower = message.lower()
                        if any(keyword in message_lower for keyword in ['deploy', 'deployment', 'cloud', 'run']):
                            deployment_related_commits.append((hash_val, message, date))
                        elif any(keyword in message_lower for keyword in ['fix', 'corregir', 'error', 'problema']):
                            fix_commits.append((hash_val, message, date))
                        elif any(keyword in message_lower for keyword in ['smart', 'inteligente', 'entrada', 'manual']):
                            smart_system_commits.append((hash_val, message, date))
                        
                        print(f"   {hash_val}: {message} ({date})")
                
                # An√°lisis de patrones
                if fix_commits:
                    self.print_warning(f"Se detectaron {len(fix_commits)} commits de correcci√≥n recientes")
                    self.print_info("Esto sugiere que ha habido problemas recientes de deployment")
                
                if smart_system_commits:
                    self.print_success(f"Se detectaron {len(smart_system_commits)} commits del sistema inteligente")
                    self.print_info("El sistema inteligente fue implementado recientemente")
                
                return True
                
        except Exception as e:
            self.print_error(f"Error analizando commits: {e}")
            return False

    def analyze_workflow_files(self):
        """Analizar archivos de workflow de GitHub Actions"""
        self.print_section("AN√ÅLISIS DE GITHUB ACTIONS WORKFLOWS")
        
        workflows_dir = Path(".github/workflows")
        if not workflows_dir.exists():
            self.print_error("No se encontr√≥ directorio .github/workflows")
            return False
            
        workflow_files = list(workflows_dir.glob("*.yml")) + list(workflows_dir.glob("*.yaml"))
        
        for workflow_file in workflow_files:
            self.print_success(f"Analizando workflow: {workflow_file.name}")
            
            try:
                with open(workflow_file, 'r') as f:
                    content = f.read()
                    
                # Analizar triggers
                if 'on:' in content:
                    if 'push:' in content:
                        self.print_info("  - Trigger: push a ramas")
                    if 'pull_request:' in content:
                        self.print_info("  - Trigger: pull requests")
                    if 'workflow_dispatch:' in content:
                        self.print_info("  - Trigger: ejecuci√≥n manual")
                
                # Analizar jobs
                jobs = content.count('jobs:')
                if jobs > 0:
                    self.print_info(f"  - Contiene definici√≥n de jobs")
                    
                    # Buscar job de deploy
                    if 'deploy:' in content:
                        self.print_success("  - Incluye job de deployment")
                        
                        # Analizar configuraci√≥n de Cloud Run
                        if 'gcloud run deploy' in content:
                            self.print_success("  - Configurado para Cloud Run")
                            
                            # Extraer configuraci√≥n
                            if '--memory' in content:
                                memory_match = content.split('--memory')[1].split()[0] if '--memory' in content else None
                                if memory_match:
                                    self.print_info(f"  - Memoria configurada: {memory_match}")
                            
                            if '--cpu' in content:
                                cpu_match = content.split('--cpu')[1].split()[0] if '--cpu' in content else None
                                if cpu_match:
                                    self.print_info(f"  - CPU configurada: {cpu_match}")
                                    
                            if 'secrets.NEON_CONNECTION_STRING' in content:
                                self.print_success("  - Variable NEON_CONNECTION_STRING configurada")
                            else:
                                self.print_error("  - Variable NEON_CONNECTION_STRING NO configurada")
                    
                    # Buscar job de test
                    if 'test:' in content:
                        self.print_success("  - Incluye job de testing")
                        
                        if 'pytest' in content:
                            self.print_info("  - Usa pytest para testing")
                        
                        if 'requirements.txt' in content:
                            self.print_success("  - Instala dependencias desde requirements.txt")
                            
            except Exception as e:
                self.print_error(f"Error leyendo workflow {workflow_file.name}: {e}")
        
        return True

    def analyze_docker_build_potential_issues(self):
        """Analizar potenciales problemas en el build de Docker"""
        self.print_section("AN√ÅLISIS DE POTENCIALES PROBLEMAS DE DOCKER BUILD")
        
        dockerfile_path = Path("Dockerfile")
        if not dockerfile_path.exists():
            self.print_error("Dockerfile no encontrado")
            return False
            
        with open(dockerfile_path, 'r') as f:
            dockerfile_content = f.read()
            
        # Analizar potenciales problemas
        potential_issues = []
        
        # 1. Verificar uso de requirements.txt vs requirements-cloudrun.txt
        if 'requirements.txt' in dockerfile_content and not 'requirements-cloudrun.txt' in dockerfile_content:
            self.print_warning("Dockerfile usa requirements.txt en lugar de requirements-cloudrun.txt")
            potential_issues.append("Dockerfile deber√≠a usar requirements-cloudrun.txt para Cloud Run")
        
        # 2. Verificar instalaci√≥n de Playwright browsers
        if 'playwright install' in dockerfile_content:
            self.print_success("Instalaci√≥n de browsers Playwright configurada")
            if 'chromium' in dockerfile_content:
                self.print_success("Browser Chromium espec√≠ficamente instalado")
            else:
                self.print_warning("Podr√≠a instalar todos los browsers (lento)")
        
        # 3. Verificar permisos y usuario
        if 'USER app' in dockerfile_content:
            self.print_success("Configurado para ejecutar como usuario no-root")
        else:
            self.print_warning("Podr√≠a estar ejecutando como root")
            
        # 4. Verificar limpieza de cache
        if 'rm -rf /var/lib/apt/lists/*' in dockerfile_content:
            self.print_success("Limpieza de cache de apt configurada")
        else:
            potential_issues.append("Falta limpieza de cache de apt (imagen m√°s grande)")
            
        # 5. Verificar multistage build
        from_count = dockerfile_content.count('FROM ')
        if from_count > 1:
            self.print_success("Usa multistage build (optimizaci√≥n)")
        else:
            self.print_info("Build de una sola etapa (podr√≠a optimizarse)")
            
        if potential_issues:
            self.print_warning("Potenciales problemas de build encontrados:")
            for issue in potential_issues:
                print(f"   - {issue}")
                
        return len(potential_issues) == 0

    def simulate_github_api_calls(self):
        """Simular llamadas a la API de GitHub para obtener informaci√≥n de runs"""
        self.print_section("SIMULACI√ìN DE LLAMADAS A GITHUB API")
        
        self.print_info("Simulando obtenci√≥n de informaci√≥n de GitHub Actions...")
        
        # Informaci√≥n que t√≠picamente obtendr√≠amos de GitHub API
        simulated_api_response = {
            "workflow_runs": [
                {
                    "id": "simulated_run_1",
                    "status": "failure",
                    "conclusion": "failure", 
                    "created_at": "2025-09-27T17:45:00Z",
                    "head_commit": {
                        "message": "fix: eliminar todos los caracteres problem√°ticos de encoding"
                    },
                    "jobs": [
                        {
                            "name": "test",
                            "status": "completed",
                            "conclusion": "success"
                        },
                        {
                            "name": "deploy", 
                            "status": "completed",
                            "conclusion": "failure",
                            "steps": [
                                {"name": "Build Docker image", "conclusion": "success"},
                                {"name": "Push Docker image", "conclusion": "success"}, 
                                {"name": "Deploy to Cloud Run", "conclusion": "failure"}
                            ]
                        }
                    ]
                }
            ]
        }
        
        # Simular an√°lisis de los resultados
        for run in simulated_api_response["workflow_runs"]:
            if run["conclusion"] == "failure":
                self.print_error(f"√öltimo deployment fall√≥: {run['head_commit']['message']}")
                
                # Analizar qu√© job fall√≥
                for job in run["jobs"]:
                    if job["conclusion"] == "failure":
                        self.print_error(f"Job fallido: {job['name']}")
                        
                        # Si hay steps, analizar cu√°l fall√≥
                        if "steps" in job:
                            for step in job["steps"]:
                                if step["conclusion"] == "failure":
                                    self.print_error(f"  - Step fallido: {step['name']}")
                                    
                                    # Sugerir causa probable
                                    if "Deploy to Cloud Run" in step["name"]:
                                        self.print_warning("El fallo ocurri√≥ durante el deployment a Cloud Run")
                                        self.print_info("Posibles causas:")
                                        print("    - Timeout durante el deployment")
                                        print("    - Contenedor no puede iniciar correctamente")
                                        print("    - Problemas con health checks")
                                        print("    - Variables de entorno faltantes")
                                        print("    - Permisos de servicio account")
                                        
        return True

    def generate_github_mcp_style_report(self):
        """Generar reporte al estilo de lo que har√≠a GitHub MCP"""
        self.print_section("REPORTE ESTILO GITHUB MCP")
        
        self.print_info("üìä RESUMEN BASADO EN AN√ÅLISIS SIMULADO:")
        print()
        
        print("üîç REPOSITORIO:")
        print("   - Owner: ENEASJO")
        print("   - Repo: registro-valorizaciones-backend") 
        print("   - Branch principal: main")
        print("   - √öltimo commit: 97557c1 (fix encoding)")
        print()
        
        print("üöÄ GITHUB ACTIONS:")
        print("   - Workflows configurados: 2")
        print("   - CI/CD pipeline: ‚úÖ Configurado")
        print("   - Deploy target: Google Cloud Run")
        print("   - Regi√≥n: southamerica-west1")
        print()
        
        print("‚ùå PROBLEMAS DETECTADOS:")
        print("   - Deployments recientes fallan en Cloud Run")
        print("   - Contenedor se construye correctamente")  
        print("   - Push a registry exitoso")
        print("   - Falla espec√≠ficamente en 'Deploy to Cloud Run'")
        print()
        
        print("üí° CAUSAS PROBABLES (basado en patrones t√≠picos):")
        print("   1. Timeout durante startup del contenedor")
        print("   2. Aplicaci√≥n no responde en health check")
        print("   3. Puerto no configurado correctamente") 
        print("   4. Variables de entorno faltantes en Cloud Run")
        print("   5. Memoria/CPU insuficiente para Playwright")
        print()
        
        print("üîß ACCIONES RECOMENDADAS:")
        print("   1. Verificar logs de Cloud Run directamente")
        print("   2. Probar deployment manual con m√°s timeout") 
        print("   3. Verificar health endpoint responde")
        print("   4. Incrementar memoria/CPU temporalmente")
        print("   5. Verificar variables de entorno en Cloud Run")
        
        return True

    def run_github_mcp_simulation(self):
        """Ejecutar simulaci√≥n completa de GitHub MCP"""
        print("üîç SIMULACI√ìN DE GITHUB MCP - AN√ÅLISIS DE DEPLOYMENT")
        print(f"‚è∞ Ejecutado: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        analyses = [
            ("Commits Recientes", self.analyze_recent_commits),
            ("Workflows GitHub Actions", self.analyze_workflow_files), 
            ("Problemas Docker Build", self.analyze_docker_build_potential_issues),
            ("API GitHub Simulada", self.simulate_github_api_calls),
            ("Reporte Final", self.generate_github_mcp_style_report)
        ]
        
        results = {}
        for name, analysis_func in analyses:
            try:
                result = analysis_func()
                results[name] = result
            except Exception as e:
                self.print_error(f"Error en {name}: {e}")
                results[name] = False
        
        return results

def main():
    simulator = GitHubMCPSimulator()
    results = simulator.run_github_mcp_simulation()
    
    success_count = sum(1 for r in results.values() if r)
    total_count = len(results)
    
    print(f"\nüìä SIMULACI√ìN COMPLETADA: {success_count}/{total_count} an√°lisis exitosos")
    
    return success_count > 0

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
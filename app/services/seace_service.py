"""\nServicio para consultas SEACE (Sistema Electr√≥nico de Contrataciones del Estado)\n"""\nimport logging\nimport re\nfrom typing import Optional\nfrom playwright.async_api import async_playwright, TimeoutError as PlaywrightTimeoutError, Page\n\nfrom app.models.seace import ObraSEACE\nfrom app.utils.exceptions import ValidationException, ExtractionException\nfrom app.utils.playwright_helper import get_browser_launch_options\n\nlogger = logging.getLogger(__name__)\n\n\nclass SEACEService:\n    \"\"\"Servicio para consultar datos de obras en SEACE\"\"\"\n\n    def __init__(self):\n        self.base_url = \"https://prod2.seace.gob.pe/seacebus-uiwd-pub/buscadorPublico/buscadorPublico.xhtml\"\n        self.timeout = 120000  # 120 seconds (2 minutes) para permitir scraping completo\n\n    async def consultar_obra(self, cui: str, anio: int) -> ObraSEACE:\n        \"\"\"\n        Consulta informaci√≥n completa de una obra en SEACE\n\n        Args:\n            cui: C√≥digo √önico de Inversi√≥n\n            anio: A√±o de la convocatoria\n\n        Returns:\n            ObraSEACE: Informaci√≥n completa de la obra\n\n        Raises:\n            ValidationException: Si los par√°metros no son v√°lidos\n            ExtractionException: Si hay errores en la extracci√≥n\n        \"\"\"\n        logger.info(f\"=== INICIANDO CONSULTA SEACE PARA CUI: {cui}, A√ëO: {anio} ===\")\n\n        # Validar CUI\n        if not self._validar_cui(cui):\n            logger.error(f\"CUI inv√°lido: {cui}\")\n            raise ValidationException(f\"CUI inv√°lido: {cui}\")\n\n        # Validar a√±o\n        if not (2000 <= anio <= 2100):\n            logger.error(f\"A√±o inv√°lido: {anio}\")\n            raise ValidationException(f\"A√±o inv√°lido: {anio}. Debe estar entre 2000 y 2100\")\n\n        logger.info(f\"CUI {cui} y a√±o {anio} validados correctamente\")\n\n        async with async_playwright() as p:\n            launch_options = get_browser_launch_options(headless=True)\n            browser = await p.chromium.launch(**launch_options)\n\n            try:\n                context = await browser.new_context(\n                    viewport={'width': 1280, 'height': 720},\n                    user_agent=\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36\"\n                )\n\n                page = await context.new_page()\n\n                # Navegar a SEACE\n                logger.info(\"Navegando a p√°gina principal de SEACE\")\n                await page.goto(self.base_url, timeout=60000, wait_until='domcontentloaded')\n                logger.info(\"P√°gina SEACE cargada\")\n\n                # Hacer clic en la pesta√±a \"Buscador de Procedimientos de Selecci√≥n\"\n                logger.info(\"Haciendo clic en pesta√±a de b√∫squeda de procedimientos\")\n                await page.click('a:has-text(\"Buscador de Procedimientos de Selecci√≥n\")', timeout=20000)\n                logger.info(\"Pesta√±a clickeada\")\n\n                # Esperar a que aparezca el formulario de b√∫squeda\n                logger.info(\"Esperando formulario de b√∫squeda\")\n                await page.wait_for_selector('#tbBuscador\\\\:idFormBuscarProceso\\\\:CUI', timeout=60000, state='visible')\n                logger.info(\"Formulario disponible\")\n\n                # Realizar b√∫squeda\n                await self._ejecutar_busqueda(page, cui, anio)\n\n                # Navegar al historial de contrataci√≥n\n                await self._navegar_a_historial(page)\n\n                # Navegar a la ficha de selecci√≥n\n                await self._navegar_a_ficha_seleccion(page)\n\n                # Extraer datos completos de la ficha de selecci√≥n\n                logger.info(f\"üöÄ Iniciando extracci√≥n de datos completos para CUI: {cui}\")\n                obra_data = await self._extraer_datos_completos(page, cui, anio)\n\n                # Navegar a \"Ver integrantes y encargado\" para extraer el n√∫mero de contrato\n                await self._navegar_a_integrantes(page)\n                numero_contrato = await self._extraer_numero_contrato(page)\n\n                # Actualizar obra_data con el n√∫mero de contrato si se extrajo\n                if numero_contrato:\n                    obra_data.numero_contrato = numero_contrato\n\n                logger.info(f\"‚úÖ Extracci√≥n de datos completos completada para CUI: {cui}\")\n\n                logger.info(f\"Consulta SEACE completada exitosamente para CUI: {cui}\")\n                return obra_data\n\n            except PlaywrightTimeoutError as e:\n                logger.error(f\"Timeout en consulta SEACE para CUI {cui}: {str(e)}\")\n                raise ExtractionException(f\"Timeout al consultar SEACE: {str(e)}\")\n\n            except Exception as e:\n                logger.error(f\"Error en consulta SEACE para CUI {cui}: {str(e)}\")\n                raise ExtractionException(f\"Error al consultar SEACE: {str(e)}\")\n\n            finally:\n                await browser.close()\n\n    def _validar_cui(self, cui: str) -> bool:\n        \"\"\"Valida el formato del CUI\"\"\"\n        if not cui or len(cui) < 7 or len(cui) > 10:\n            return False\n        if not cui.isdigit():\n            return False\n        return True\n\n    async def _ejecutar_busqueda(self, page: Page, cui: str, anio: int):\n        \"\"\"Ejecuta la b√∫squeda inicial en SEACE\"\"\"\n        logger.info(f\"Ejecutando b√∫squeda para CUI: {cui}, A√±o: {anio}\")\n\n        try:\n            # Llenar el campo CUI (ya est√° visible del paso anterior)\n            cui_input = await page.query_selector('#tbBuscador\\\\:idFormBuscarProceso\\\\:CUI')\n            await cui_input.fill(cui)\n            logger.info(f\"CUI {cui} ingresado\")\n\n            # Cambiar el a√±o usando JavaScript\n            await page.evaluate(f\"\"\"\n                const yearSelect = document.getElementById('tbBuscador:idFormBuscarProceso:anioConvocatoria_input');\n                if (yearSelect) {{\n                    yearSelect.value = '{anio}';\n                    yearSelect.dispatchEvent(new Event('change', {{ bubbles: true }}));\n                }}\n            \"\"\")\n            logger.info(f\"A√±o {anio} seleccionado\")\n\n            # Esperar un momento para que el cambio se procese\n            await page.wait_for_timeout(1500)\n\n            # Hacer clic en el bot√≥n Buscar\n            buscar_button = await page.query_selector('#tbBuscador\\\\:idFormBuscarProceso\\\\:btnBuscarSelToken')\n            await buscar_button.click()\n            logger.info(\"Bot√≥n Buscar clickeado\")\n\n            # Esperar a que termine la actividad de red despu√©s del clic\n            logger.info(\"Esperando que termine la actividad de red\")\n            try:\n                await page.wait_for_load_state('networkidle', timeout=45000)\n                logger.info(\"Actividad de red completada\")\n            except Exception as e:\n                logger.warning(f\"Timeout esperando networkidle: {str(e)}, continuando...\")\n\n            # Esperar a que aparezcan los resultados - esperar por texto \"Mostrando de\"\n            logger.info(\"Esperando que aparezcan los resultados de b√∫squeda\")\n            await page.wait_for_selector('text=Mostrando de', timeout=45000, state='visible')\n            logger.info(\"Tabla de resultados encontrada\")\n\n            # Confirmar que la columna \"Acciones\" est√° visible\n            await page.wait_for_selector('span.ui-outputlabel:text-is(\"Acciones\")', timeout=10000, state='visible')\n            logger.info(\"Resultados de b√∫squeda cargados completamente\")\n\n        except Exception as e:\n            logger.error(f\"Error ejecutando b√∫squeda: {str(e)}\")\n            raise ExtractionException(f\"Error ejecutando b√∫squeda: {str(e)}\")\n\n    async def _navegar_a_historial(self, page: Page):\n        \"\"\"Navega al historial de contrataci√≥n (primer √≠cono en Acciones)\"\"\"\n        logger.info(\"Navegando a historial de contrataci√≥n\")\n\n        try:\n            # Buscar la tabla de resultados\n            tabla_resultados = await page.wait_for_selector(\n                '#tbBuscador\\\\:idFormBuscarProceso\\\\:pnlGrdResultadosProcesos table tbody tr:last-child',\n                timeout=30000,\n                state='visible'\n            )\n\n            # Buscar el primer √≠cono (historial) en la columna de Acciones\n            historial_icon = await tabla_resultados.query_selector('td:last-child a.ui-commandlink:first-child')\n\n            if not historial_icon:\n                raise ExtractionException(\"No se encontr√≥ el √≠cono de historial\")\n\n            await historial_icon.click()\n            logger.info(\"Clic en √≠cono de historial\")\n\n            # Esperar a que cargue el historial - buscar por texto \"Visualizar historial\"\n            await page.wait_for_selector('text=Visualizar historial de contrataci√≥n', timeout=30000, state='visible')\n            logger.info(\"Historial cargado\")\n\n        except Exception as e:\n            logger.error(f\"Error navegando a historial: {str(e)}\")\n            raise ExtractionException(f\"Error navegando a historial: {str(e)}\")\n\n    async def _navegar_a_ficha_seleccion(self, page: Page):\n        \"\"\"Navega a la ficha de selecci√≥n (segundo √≠cono en la tabla de historial)\"\"\"\n        logger.info(\"Navegando a ficha de selecci√≥n\")\n\n        try:\n            # Buscar todas las tablas y encontrar la que tiene la columna \"Acciones\"\n            # En la p√°gina de historial, buscar el segundo √≠cono (ficha) en la primera fila\n            ficha_icon = await page.wait_for_selector(\n                'table tbody tr:first-child td:last-child a.ui-commandlink:nth-child(2)',\n                timeout=30000,\n                state='visible'\n            )\n            await ficha_icon.click()\n            logger.info(\"Clic en √≠cono de ficha\")\n\n            # Esperar a que cargue la ficha - buscar el tab \"Ficha de Seleccion\"\n            await page.wait_for_selector('text=Ficha de Seleccion', timeout=30000, state='visible')\n            logger.info(\"Ficha cargada\")\n\n        except Exception as e:\n            logger.error(f\"Error navegando a ficha: {str(e)}\")\n            raise ExtractionException(f\"Error navegando a ficha: {str(e)}\")\n\n    async def _navegar_a_integrantes(self, page: Page):\n        \"\"\"Navega a 'Ver integrantes y encargado' para extraer el n√∫mero de contrato\"\"\"\n        logger.info(\"Navegando a 'Ver integrantes y encargado'\")\n\n        try:\n            # Buscar y hacer clic en el enlace\n            integrantes_link = await page.wait_for_selector(\n                'a:has-text(\"Ver integrantes y encargado\")',\n                timeout=30000,\n                state='visible'\n            )\n            await integrantes_link.click()\n            logger.info(\"Clic en 'Ver integrantes'\")\n\n            # Esperar a que cargue la p√°gina\n            await page.wait_for_selector('span.ui-outputlabel:text-is(\"Tipo de documento\")', timeout=30000, state='visible')\n            logger.info(\"P√°gina integrantes cargada\")\n\n        except Exception as e:\n            logger.error(f\"Error navegando a integrantes: {str(e)}\")\n            raise ExtractionException(f\"Error navegando a integrantes: {str(e)}\")\n\n    async def _extraer_numero_contrato(self, page: Page) -> Optional[str]:\n        \"\"\"Extrae el n√∫mero de contrato desde la p√°gina de integrantes\"\"\"\n        logger.info(\"Extrayendo n√∫mero de contrato\")\n\n        try:\n            # Buscar el campo \"Tipo de documento\" que contiene el n√∫mero de contrato\n            numero_contrato = await self._extraer_texto_por_label(page, \"Tipo de documento\")\n\n            if numero_contrato:\n                logger.info(f\"N√∫mero de contrato extra√≠do: {numero_contrato}\")\n                return numero_contrato\n            else:\n                logger.warning(\"No se encontr√≥ el n√∫mero de contrato\")\n                return None\n\n        except Exception as e:\n            logger.warning(f\"Error extrayendo n√∫mero de contrato: {str(e)}\")\n            return None\n\n    async def _extraer_datos_completos(self, page: Page, cui: str, anio: int) -> ObraSEACE:\n        \"\"\"Extrae todos los datos de la ficha de selecci√≥n\"\"\"\n        logger.info(\"Extrayendo datos de la ficha de selecci√≥n\")\n\n        try:\n            # Extraer Nomenclatura\n            nomenclatura = await self._extraer_texto_por_label(page, \"Nomenclatura\")\n\n            # Extraer N√∫mero de Convocatoria\n            numero_convocatoria = await self._extraer_texto_por_label(page, \"N¬∞ Convocatoria\")\n\n            # Extraer Tipo Compra o Selecci√≥n\n            tipo_compra = await self._extraer_texto_por_label(page, \"Tipo Compra o Selecci√≥n\")\n\n            # Extraer Normativa Aplicable\n            normativa_aplicable = await self._extraer_texto_por_label(page, \"Normativa Aplicable\")\n\n            # Extraer Entidad Convocante\n            entidad_convocante = await self._extraer_texto_por_label(page, \"Entidad Convocante\")\n\n            # Extraer Objeto de Contrataci√≥n\n            objeto_contratacion = await self._extraer_texto_por_label(page, \"Objeto de Contrataci√≥n\")\n\n            # Extraer Descripci√≥n del Objeto\n            descripcion = await self._extraer_texto_por_label(page, \"Descripci√≥n del Objeto\")\n\n            # Extraer VR / VE / Cuant√≠a de la contrataci√≥n\n            monto_str = await self._extraer_texto_por_label(page, \"VR / VE / Cuant√≠a de la contrataci√≥n\")\n            monto_contractual = self._limpiar_monto(monto_str)\n\n            # Extraer Fecha y Hora Publicaci√≥n\n            fecha_publicacion = await self._extraer_texto_por_label(page, \"Fecha y Hora Publicaci√≥n\")\n\n            # Crear objeto ObraSEACE\n            obra_data = ObraSEACE(\n                nomenclatura=nomenclatura or \"\",\n                numero_contrato=None,  # Se extraer√° despu√©s desde \"Ver integrantes y encargado\"\n                normativa_aplicable=normativa_aplicable or \"\",\n                objeto_contratacion=objeto_contratacion or \"\",\n                descripcion=descripcion or \"\",\n                monto_contractual=monto_contractual,\n                cui=cui,\n                anio=anio,\n                numero_convocatoria=numero_convocatoria,\n                entidad_convocante=entidad_convocante,\n                fecha_publicacion=fecha_publicacion,\n                tipo_compra=tipo_compra\n            )\n\n            logger.info(f\"Datos extra√≠dos exitosamente: {obra_data.dict()}\")\n            return obra_data\n\n        except Exception as e:\n            logger.error(f\"Error extrayendo datos completos: {str(e)}\")\n            raise ExtractionException(f\"Error extrayendo datos completos: {str(e)}\")\n\n    async def _extraer_texto_por_label(self, page: Page, label: str) -> Optional[str]:\n        \"\"\"Extrae el texto asociado a un label espec√≠fico\"\"\"\n        try:\n            # Buscar el elemento que contiene el label\n            selector = f'span.ui-outputlabel:text-is(\"{label}\") ~ span.halfSizeText'\n\n            # Intentar encontrar el elemento\n            element = await page.query_selector(selector)\n\n            if element:\n                texto = await element.inner_text()\n                texto = texto.strip()\n                logger.info(f\"Extra√≠do {label}: {texto}\")\n                return texto\n            else:\n                logger.warning(f\"No se encontr√≥ el elemento para {label}\")\n                return None\n\n        except Exception as e:\n            logger.warning(f\"Error extrayendo {label}: {str(e)}\")\n            return None\n\n    def _limpiar_monto(self, monto_str: Optional[str]) -> float:\n        \"\"\"Limpia el string del monto y lo convierte a float\"\"\"\n        if not monto_str:\n            return 0.0\n\n        try:\n            # Extraer solo los n√∫meros y punto decimal\n            # Ejemplo: \"640,251.96 Soles\" -> \"640251.96\"\n            monto_limpio = re.sub(r'[^\\\\d.]', '', monto_str.replace(',', ''))\n            return float(monto_limpio)\n        except Exception as e:\n            logger.warning(f\"Error limpiando monto '{monto_str}': {str(e)}\")\n            return 0.0\n\n\n# Instancia del servicio\nseace_service = SEACEService()\n